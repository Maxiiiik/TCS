version: '3'

services:
  zookeeper:
    image: 'confluentinc/cp-zookeeper:latest'
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000

  kafka:
    image: 'confluentinc/cp-kafka:latest'
    hostname: kafka
    container_name: kafka
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
      interval: 5s
      timeout: 5s
      retries: 50
    depends_on:
      - zookeeper

  init-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: init-kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic field-reading --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic field-processing --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    depends_on:
      kafka:
        condition: service_healthy

  db:
    build:
      context: db
      dockerfile: Dockerfile
    container_name: db
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U postgres"]
        interval: 5s
        timeout: 5s
        retries: 50
  
  service1:
    build: 
      context: service1
      dockerfile: Dockerfile
    container_name: service1
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=db
      - KAFKA_HOST=kafka:9092
    volumes:
      - type: bind
        source: service1/data
        target: /app/data
    depends_on:
      db:
        condition: service_healthy
      kafka: 
        condition: service_healthy
      service2:
        condition: service_started
    links:
      - db
      - kafka
      - service2
  
  service2:
    build: 
      context: service2
      dockerfile: Dockerfile
    container_name: service2
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PORT=5432
      - POSTGRES_HOST=db
      - KAFKA_HOST=kafka:9092
    volumes:
      - type: bind
        source: service2/data
        target: /app/data
    depends_on:
      db:
        condition: service_healthy
      kafka: 
        condition: service_healthy
      service3:
        condition: service_started
    links:
      - db
      - kafka
      - service3

  service3:
    build: 
      context: service3
      dockerfile: Dockerfile
    container_name: service3
    environment:
      - KAFKA_HOST=kafka:9092
    volumes:
      - type: bind
        source: service3/output
        target: /app/output
    depends_on:
      kafka: 
        condition: service_healthy
    links:
      - kafka
